[
  {
    "command": "git add <filename>",
    "description":"提交更改",
    "detail":"把文件修改添加到暂存区"
  },{
    "command": "git commit -m \"描述\"",
    "description":"提交更改",
    "detail":"把暂存区的所有内容提交到当前分支"
  },{
    "command": "git diff",
    "description":"查看修改内容",
    "detail":"查看修改内容，git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）， git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别 "
  },{
    "command": "git log",
    "description":"查看提交日志",
    "detail":"查看提交日志，可以加参数　--pretty=oneline"
  },{
    "command": "git reset --hard <commit_id>",
    "description":"回退提交",
    "detail":"git reset --hard HEAD^ 这个命令是回退到前一个commit，commit_id是每一次commit 的提交id,通过git log　可查看"
  },{
    "command": "git reflog",
    "description":"查看命令历史",
    "detail":"查看输入过的命令历史记录"
  },{
    "command": "git checkout -- <filename>",
    "description":"把filename文件在工作区的修改全部撤销",
    "detail":"把filename文件在工作区的修改全部撤销"
  },{
    "command": "git reset HEAD filename ",
    "description":"把暂存区的修改回退到工作区",
    "detail":"把暂存区的修改回退到工作区"
  },{
    "command": "git rm filename",
    "description":"删除文件",
    "detail":"删除文件，如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- <file>就可以；如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file> ；如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了"
  },{
    "command": "git remote add origin <git@server-name:path/repo-name.git>",
    "description":"关联一个远程库",
    "detail":"关联一个远程库，取名叫origin"
  },{
    "command": "git push -u origin master",
    "description":"关联后，第一次推送master分支的所有内容",
    "detail":"关联后，第一次推送master分支的所有内容"
  },{
    "command": "git push origin master",
    "description":"推送本地分支",
    "detail":"推送本地分支"
  },{
    "command": "git checkout -b <dev>",
    "description":"创建并切换分支",
    "detail":"创建并切换到分支dev"
  },{
    "command": "git checkout -b <dev> <origin/dev>",
    "description":"在本地创建和远程分支对应的分支",
    "detail":"在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致"
  },{
    "command": "git branch",
    "description":"查看分支",
    "detail":"查看当前分支"
  },{
    "command": "git branch <dev>",
    "description":"新建分支",
    "detail":"新建分支dev"
  },{
    "command": "git checkout <dev>",
    "description":"切换到分支",
    "detail":"切换到分支dev"
  },{
    "command": "git merge dev",
    "description":"合并分支",
    "detail":"把dev分支合并到当前分支, git merge --no-ff -m \"描述\" <dev> ,合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并"
  },{
    "command": "git branch -d <dev>",
    "description":"删除分支",
    "detail":"删除dev分支"
  },{
    "command": "git branch -D <dev>",
    "description":"强行删除分支",
    "detail":"强行删除dev分支，丢弃一个没有被合并过的分支，没有合并的分支删除了找不到"
  },{
    "command": "git log --graph",
    "description":"查看分支合并图",
    "detail":"查看分支合并图"
  },{
    "command": "git stash",
    "description":"储藏更改",
    "detail":"储藏更改"
  },{
    "command": "git stash pop",
    "description":"恢复储藏",
    "detail":"恢复储藏，同时删除stash内容"
  },{
    "command": "git stash list",
    "description":"查看stash",
    "detail":""
  },{
    "command": "git stash apply <stash@{0}>",
    "description":"恢复 stash@{0} 这个储藏，stash内容不删除",
    "detail":"恢复 stash@{0} 这个储藏，stash内容不删除"
  },{
    "command": "git cherry-pick <commit_id>",
    "description":"复制一个特定的提交到当前分支",
    "detail":"复制一个特定的提交到当前分支"
  },{
    "command": "git remote -v",
    "description":"查看远程库信息",
    "detail":"查看关联的远程库信息"
  },{
    "command": "git push origin <dev>",
    "description":"推送分支",
    "detail":"把本地dev分支推送到远程"
  },{
    "command": "git pull",
    "description":"抓取远程分支，抓取的是和本地分支对应的远程分支",
    "detail":"抓取远程分支，抓取的是和本地分支对应的远程分支"
  },{
    "command": "git pull origin <dev> ",
    "description":"抓取远程的dev分支",
    "detail":"抓取远程的dev分支"
  },{
    "command": "git branch --set-upstream <branch-name> <origin/branch-name>",
    "description":"分支关联",
    "detail":"建立本地分支和远程分支的关联"
  },{
    "command": "git rebase",
    "description":"变基",
    "detail":"把本地未push的分叉提交历史整理成直线"
  },{
    "command": "git tag <tagname>",
    "description":"创建标签",
    "detail":"在最新提交的commit上打一个标签"
  },{
    "command": "git tag <v0.9> <commit_id>",
    "description":"在 f52c633 这个提交上打标签 v0.9",
    "detail":"在 f52c633 这个提交上打标签 v0.9"
  },{
    "command": "git tag -a <tagname> -m \"描述\"",
    "description":"指定标签信息",
    "detail":"指定标签信息"
  },{
    "command": "git tag",
    "description":"查看所有标签",
    "detail":"查看所有标签"
  },{
    "command": "git tag -d <v0.1>",
    "description":"删除本地标签",
    "detail":"删除本地标签"
  },{
    "command": "git push origin <v0.1>",
    "description":"推送标签到远程",
    "detail":"推送标签到远程"
  },{
    "command": "it push origin --tags",
    "description":"一次性推送全部尚未推送到远程的本地标签",
    "detail":"一次性推送全部尚未推送到远程的本地标签"
  },{
    "command": "git push origin :refs/tags/<v0.1>",
    "description":"删除远程标签",
    "detail":"删除远程标签"
  },{
    "command": "git remote rm <origin>",
    "description":"删除已有的远程库",
    "detail":"删除已有的远程库"
  },{
    "command": "git config --global color.ui ture",
    "description":"让git显示颜色",
    "detail":"让git显示颜色"
  },{
    "command": "git check-ignore -v <App.class>",
    "description":"检查.gitignore中哪个规则对 App.class 进行了忽略提交",
    "detail":"忽略某些文件时，需要编写 .gitignore 文件；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理"
  },{
    "command": "git add -f App.class",
    "description":"强制添加 App.class 文件到git，针对.gitignore的忽略",
    "detail":""
  },{
    "command": "git config --global alias.st ststus",
    "description":"修改git配置",
    "detail":"告诉Git，以后st就表示status, 还有比如：git config --global alias.unstage 'reset HEAD' 、git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"; 配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。 而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置"
  }
]